/* Copyright (c) 2017 FIRST. All rights reserved. * * Redistribution and use in source and binary forms, with or without modification, * are permitted (subject to the limitations in the disclaimer below) provided that * the following conditions are met: * * Redistributions of source code must retain the above copyright notice, this list * of conditions and the following disclaimer. * * Redistributions in binary form must reproduce the above copyright notice, this * list of conditions and the following disclaimer in the documentation and/or * other materials provided with the distribution. * * Neither the name of FIRST nor the names of its contributors may be used to endorse or * promote products derived from this software without specific prior written permission. * * NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS * LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE * FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL * DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER * CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, * OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. */package org.firstinspires.ftc.teamcode.TeleOp;import android.os.Build;import androidx.annotation.RequiresApi;import com.qualcomm.robotcore.eventloop.opmode.OpMode;import com.qualcomm.robotcore.eventloop.opmode.TeleOp;import com.qualcomm.robotcore.hardware.DcMotor;import com.qualcomm.robotcore.hardware.Servo;import com.qualcomm.robotcore.util.ElapsedTime;import org.firstinspires.ftc.robotcore.external.hardware.camera.WebcamName;import org.firstinspires.ftc.teamcode.HardwareClasses.Controller;import org.firstinspires.ftc.teamcode.HardwareClasses.Intake;import org.firstinspires.ftc.teamcode.HardwareClasses.Katana;import org.firstinspires.ftc.teamcode.HardwareClasses.MecanumDrive;import org.firstinspires.ftc.teamcode.HardwareClasses.Sensors;import org.firstinspires.ftc.teamcode.HardwareClasses.Shooter;import org.firstinspires.ftc.teamcode.HardwareClasses.WobbleGripper;import org.firstinspires.ftc.utilities.IMU;import org.firstinspires.ftc.utilities.Utils;import org.openftc.easyopencv.OpenCvCameraFactory;import org.openftc.easyopencv.OpenCvWebcam;@TeleOp(name = "REAL TELE OP", group = "TeleOp")public class RealTeleOp extends OpMode {	private boolean realMatch = true;	private boolean autoAim = true;	private int ringCount;		private final ElapsedTime mainTime = new ElapsedTime();		private Controller driver, operator;	private MecanumDrive robot;	private Shooter shooter;	private Intake intake;	private WobbleGripper wobble;	private Katana katana;			@Override	public void init() {		telemetry.addData("Status", "Initialized");				Servo feeder = hardwareMap.get(Servo.class, "feeder");		Servo feederLock = hardwareMap.get(Servo.class, "feederlock");				Servo bumperLeft = hardwareMap.get(Servo.class, "bumperleft");		Servo bumperRight = hardwareMap.get(Servo.class, "bumperright");				Servo lifter = hardwareMap.get(Servo.class, "lifter");		Servo gripperOne = hardwareMap.get(Servo.class, "gripperone");		Servo gripperTwo = hardwareMap.get(Servo.class, "grippertwo");				Servo katanaRight = hardwareMap.get(Servo.class, "katanaright");		Servo katanaLeft = hardwareMap.get(Servo.class, "katanaleft");		driver = new Controller(gamepad1);		operator = new Controller(gamepad2);		Controller.Thumbstick driverRightStick = driver.getRightThumbstick();		Controller.Thumbstick driverLeftStick = driver.getLeftThumbstick();		driverLeftStick.setShift(0);				DcMotor frontLeft = hardwareMap.get(DcMotor.class, "frontleft");		DcMotor frontRight = hardwareMap.get(DcMotor.class, "frontright");		DcMotor backLeft = hardwareMap.get(DcMotor.class, "backleft");		DcMotor backRight = hardwareMap.get(DcMotor.class, "backright");				DcMotor shooterOne = hardwareMap.get(DcMotor.class, "shooterone");		DcMotor shooterTwo = hardwareMap.get(DcMotor.class, "shootertwo");		DcMotor intakeDrive = hardwareMap.get(DcMotor.class, "intake");				Utils.setHardwareMap(hardwareMap);		IMU imu = new IMU("imu");				int cameraMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(				"cameraMonitorViewId", "id", hardwareMap.appContext.getPackageName());		WebcamName frontCamName = hardwareMap.get(WebcamName.class, "Front Camera");		OpenCvWebcam frontCamera = OpenCvCameraFactory.getInstance().createWebcam(frontCamName, cameraMonitorViewId);				robot = new MecanumDrive(frontLeft, frontRight, backLeft, backRight);		Sensors.mapSensors(imu, frontCamera);				shooter = new Shooter(shooterOne, shooterTwo, feeder, feederLock);		intake = new Intake(intakeDrive, bumperLeft, bumperRight);		wobble = new WobbleGripper(gripperOne, gripperTwo, lifter);		katana = new Katana(katanaRight, katanaLeft);				mainTime.reset();				Sensors.frontCamera.setPipeline(Sensors.frontCamera.autoAimPipeline);		Sensors.frontCamera.startVision(320, 240);	}			@Override	public void init_loop() {		Sensors.update();		shooter.lockFeeder();		shooter.resetFeeder();		shooter.shooterOff();		intake.intakeOff();				driver.update();				if(wobble.lifter.getPosition() > .5){			ringCount = 4;			wobble.armFold();			wobble.gripperHalf();		}else if(intake.bumperLeft.getPosition() < .2){			ringCount = 1;			wobble.armDown();			if(mainTime.seconds() > .4) wobble.gripperGrip();		}else{			ringCount = 0;			wobble.armDown();			if(mainTime.seconds() > .4) wobble.gripperGrip();		}				realMatch = !driver.crossToggle();		autoAim = !driver.triangleToggle();				robot.setPower(0,0, gamepad1.left_stick_x*-1, (((driver.RTFloat() + 1) / -2) + 1.5) * .6);				telemetry.addData("auto aim", autoAim);		telemetry.addData("real match", realMatch);		telemetry.addData("ring count", ringCount);				telemetry.update();	}			@Override	public void start() {		Sensors.update();		if(realMatch){			switch(ringCount){				case 0:					wobble.newState(WobbleGripper.GripperState.GRIP);					robot.resetGyro(0);					break;								case 1:					wobble.newState(WobbleGripper.GripperState.GRIP);					robot.resetGyro(90);					break;								case 4:					wobble.newState(WobbleGripper.GripperState.HALF);					robot.resetGyro(0);					break;			}		}else{ wobble.newState(WobbleGripper.GripperState.HALF); robot.resetGyro(0); }				Shooter.newState(Shooter.ShooterState.OFF);		Intake.newState(Intake.IntakeState.OFF);		Intake.newState(Intake.BumperState.DEPLOY);		WobbleGripper.newState(WobbleGripper.ArmState.FOLD);		mainTime.reset();	}			@RequiresApi(api = Build.VERSION_CODES.N)	@Override	public void loop() {		Sensors.update();				//controller config		Controller.Thumbstick driverRightStick = driver.getRightThumbstick();		Controller.Thumbstick driverLeftStick = driver.getLeftThumbstick();		driverRightStick.setShift(Sensors.gyro.getModAngle());		driverLeftStick.setShift(0);		driver.update();		operator.update();		autoAim = !driver.triangleToggle();						//driver controls		robot.driveState(driverRightStick.shiftedY(), driverRightStick.shiftedX(), driverLeftStick.shiftedX(), driver.RTFloat());		robot.cardinalState(driver.upPress(), driver.rightPress(), driver.downPress(), driver.leftPress());		robot.autoAimState(driver.RSPress(), autoAim, driver.circlePress(), driver.crossPress(), 9);				if(driver.squarePress()){ robot.resetGyro(-90); }						//operator controls		shooter.shooterState(operator.trianglePress(), operator.leftPress(), operator.rightPress(), autoAim);		shooter.feederState(operator.square());				intake.intakeState(operator.crossPress(), operator.circle());		intake.bumperState(operator.RSPress(), driver.LT());				wobble.armState(operator.LBPress(), operator.LSPress());		wobble.gripperState(operator.RBPress());				katana.katanaState(driver.RBToggle(), false);						//endgame start		if(mainTime.seconds() > 87 && mainTime.seconds() < 88 && realMatch) WobbleGripper.newState(WobbleGripper.ArmState.UP);				//match end		if((realMatch && mainTime.seconds() > 121) || driver.touchpad()) requestOpModeStop();						//telemetry		telemetry.addData("power shot aim", Sensors.frontCamera.leftPSAimError());		telemetry.addData("drive state", Sensors.frontCamera.towerAimError());		telemetry.addData("time", mainTime.seconds());		telemetry.addData("TARGET rpm", Shooter.targetRPM);		telemetry.addData("MEASURED rpm", shooter.getRPM());		telemetry.addData("MEASURED angle", Sensors.gyro.getModAngle());		telemetry.addData("distance to goal", Sensors.frontCamera.towerDistance());		telemetry.addData("shooter offset angle", Sensors.frontCamera.shooterOffsetAngle());		telemetry.update();	}}